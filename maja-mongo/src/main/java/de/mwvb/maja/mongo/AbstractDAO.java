package de.mwvb.maja.mongo;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.zip.CRC32;

import org.mongodb.morphia.Datastore;
import org.mongodb.morphia.query.Query;

import com.mongodb.DBCollection;

public abstract class AbstractDAO<E> {
    public static Database database;

    protected abstract Class<E> getEntityClass();

    private DBCollection getCollection() {
        return ds().getCollection(getEntityClass());
    }

    /**
     * Creates new document or updates existing document.
     * 
     * @param entity
     */
    public void save(E entity) {
        ds().save(entity);
    }

    /**
     * Removes document from collection.
     * 
     * @param entity
     */
    public void delete(E entity) {
        ds().delete(entity);
    }

    /**
     * @return all entities of the collection
     */
    public List<E> list() {
        return createQuery().asList();
    }

    /**
     * Find by id
     * 
     * @param id String
     * @return null if not exists
     */
    public E get(String id) {
        return createQuery().field("id").equal(id).get();
    }

    /**
     * @return number of documents in collection
     */
    public long size() {
        return createQuery().count();
    }

    @SuppressWarnings("unchecked")
    public List<String> distinct(String fieldname) {
        return new ArrayList<String>(getCollection().distinct(fieldname));
    }

    protected final Query<E> createQuery() {
        return database.ds().createQuery(getEntityClass());
    }

    protected final Datastore ds() {
        return database.ds();
    }

    /** Delete all records */
    public void clear() {
        ds().delete(createQuery());
    }

    /** Deletes whole collection */
    public void dropCollection() {
        getCollection().drop();
    }

    /**
     * @return new UUID (without dashes)
     */
    public static String genId() {
        return UUID.randomUUID().toString().replace("-", "");
    }

    /**
     * @param str any String, e.g. an ID generated by genId()
     * @return CRC of str as 6 character long String (using base 36 that means used
     *         characters are 0-9 and a-z)
     */
    public static String code6(String str) {
        CRC32 crc = new CRC32();
        crc.update(str.getBytes());
        String ret = "000000" + Integer.toString((int) crc.getValue(), 36).toLowerCase().replace("-", "");
        return ret.substring(ret.length() - 6);
    }

    /** genId() + code6() */
    public static String id6() {
        return code6(genId());
    }

    /**
     * Throws RuntimeException if id is not a 6 character long String using
     * characters 0-9 and a-z.
     * 
     * @param id
     */
    public static void checkId6(String id) {
        if (id == null || id.trim().length() != 6) {
            throw new RuntimeException("Illegal id");
        }
        for (int i = 0; i < id.length(); i++) {
            char c = id.charAt(i);
            if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z'))) {
                throw new RuntimeException("Illegal id");
            }
        }
    }
}
